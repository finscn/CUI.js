"use strict";

var CUI = CUI || {};

(function(exports) {

    var Class = exports.Class;
    var Utils = exports.Utils;
    var Component = exports.Component;
    var BaseHolder = exports.BaseHolder;


    //////////////////////////////////////////////
    //////////////////////////////////////////////
    //////////////////////////////////////////////
    //////////////////////////////////////////////
    //////////////////////////////////////////////




    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////


    var propertiesHolder = [];

    Class.defineProperties(BaseHolder.prototype, propertiesHolder);

    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////

    var methods = {


    };

    Component.prototype.initDisplayObject = function() {
        var displayObject = CUI.Utils.createContainer();
        displayObject.ignoreResize = true;
        this.displayObject = displayObject;
        this.displayObject.pivot.set(this._pivotX, this._pivotY);
        if (this.parent) {
            this.parent.addChildDisplayObject(this);
        }
    };
    for (var p in methods) {
        Component.prototype[p] = methods[p];
    }

    BaseHolder.prototype.initDisplayObject = function() {
        var displayObject = CUI.Utils.createSprite();
        this.displayObject = displayObject;
        if (this.parent) {
            this.parent.addChildDisplayObject(this);
        }
    };
    for (var p in methods) {
        BaseHolder.prototype[p] = methods[p];
    }

    // if (typeof module !== "undefined") {
    //     // do nothing
    // }

}(CUI));
